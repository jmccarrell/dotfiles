#!/usr/bin/env bash
# set my path exactly how I want it.

# declare jeffs home paths
function jwm_home_paths() {
    local -a jwm_paths=($HOME/bin
                        $HOME/.local/bin
                        $HOME/.rbenv/shims
                        $HOME/.rbenv/bin
                       )

    printf "%s\n" "${jwm_paths[@]}"
}


# define GOPATH, and set PATH from GOPATH as needed.
function jwm_go_locations() {
    declare -a go_locations=( /j/proj/gopl-exercises )

    printf "%s\n" "${go_locations[@]}"
}

# return every go project as a list of of lines
function jwm_go_paths() {
    declare -a go_paths=()
    declare -a go_locations=( $(jwm_go_locations) )
    if (( ${#go_locations[@]} > 0 )); then
        for gp in ${go_locations[@]}; do
            if [[ -e $gp && -e ${gp}/bin ]]; then
                go_paths+=($gp)
            fi
        done
    fi
    printf "%s\n" "${go_paths[@]}"
}

# return the bin directory for every go project as a list of lines
function jwm_go_bin_paths() {
    declare -a go_locs=( $(jwm_go_locations) )
    declare -a go_bin_paths=()
    for gl in ${go_locs[@]}; do
        if [[ -e $gl && -e $gl/bin ]]; then
            go_bin_paths+=($gl/bin)
        fi
    done

    printf "%s\n" "${go_bin_paths[@]}"
}

function jwm_standard_paths() {
    paths_fname=/etc/paths
    if [[ -f ${paths_fname} && -r ${paths_fname} ]]; then
        /bin/cat < $paths_fname
    fi
}

function jwm_rvm_path() {
    # when rvm is installed, it wants $HOME/.rvm/bin
    declare -a rvm_path=()
    if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
        rvm_path=($HOME/.rvm/bin)
    fi
    printf "%s\n" "${rvm_path[@]}"
}

# sift runs postgres 9.6, so provide that here
function jwm_postgresql_path {
    pg_path=()
    # check for 9.6 from homebrew
    pg_96="/usr/local/opt/postgresql@9.6/bin"
    if [[ -s "$pg_96" ]]; then
        pg_path=("$pg_96")
    fi
    printf "%s\n" "$pg_path[@]"
}

# circa Nov 2020, homebrew will provide python 3.7, 3.8 or 3.9
#  with the default being 3.9.
# this function chooses which of those to prefer.
# py3.9 had a conflict installing pandas as of pandas, so rely on py 3.8 for now in Nov 2020.
function jwm_python3_path() {
    macos_python3_path='/usr/local/opt/python@3.8/libexec/bin'
    result=''
    if [ -e "$macos_python3_path" ]; then
        result="$macos_python3_path"
    fi
    printf "$result"
}

function jwm_gcloud_sdk_path() {
    gcloud_sdk_bin='/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin'
    result=''
    if [ -e "$gcloud_sdk_bin" ]; then
        result="$gcloud_sdk_bin"
    fi
    printf "$result"
}

function jwm_set_path() {
    local -A dedup
    local -a result=()

    # remove any duplicate path elements
    for dir in \
        $(jwm_home_paths) \
        $(jwm_python3_path) \
        $(jwm_go_bin_paths) \
        $(jwm_gcloud_sdk_path) \
        $(jwm_standard_paths) \
        $(jwm_rvm_path) \
        $(jwm_postgresql_path) \
        ; do
        if [ ${dedup[$dir]+_} ]; then
            continue
        fi
        dedup[${dir}]=1

        if [[ -e $dir ]]; then
            result+=($dir)
        fi
    done

    # join the path elements with :
    local ifs_save="$IFS"
    IFS=:
    local p="${result[*]}"
    IFS="$ifs_save"
    # printf 'ifs_save: %s\n' $p

    PATH=$p

    # let pyenv do its thing last
    if command -v pyenv 1>/dev/null 2>&1; then  eval "$(pyenv init -)"; fi
}
