#!/usr/bin/env bash
# set my path exactly how I want it.

# declare jeffs home paths
jwm_home_paths() {

    # entelo has standardized on node 6
    local node_path="/usr/local/opt/node@6/bin"
    # and entelo needs to find yarn stuff
    local yarn_path=$HOME/.yarn/bin

    local -a jwm_paths=($HOME/bin
                        # haskell stack puts things in $HOME/.local/bin
                        $HOME/.local/bin
                        ${node_path}
                        $HOME/.rbenv/shims
                        $HOME/.rbenv/bin
                        $yarn_path
                       )

    print -l ${jwm_paths[@]}
}


# define GOPATH, and set PATH from GOPATH as needed.
# all I do is declare where to source go code from in the list go_locations
declare -a go_locations=($HOME/go
                         /j/proj/gopl-exercises)

declare go_paths=()
declare go_bin_paths=()
if (( ${#go_locations[@]} > 0 )); then
    for gp in ${go_locations[@]}; do
        if [[ -e $gp && -e ${gp}/bin ]]; then
            # append this one
            go_paths+=($gp)
            go_bin_paths+=($gp/bin)
        fi
    done
fi

# from https://stackoverflow.com/questions/1527049/join-elements-of-an-array
function join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

if (( ${#go_paths[@]} > 0 )); then
    export GOPATH=$(join_by : ${go_paths[@]})
fi
# echo GOPATH is: ${GOPATH}

declare -a standard_paths=(/usr/local/opt/go/libexec/bin
                           /usr/local/bin
                           /usr/local/sbin
                           /usr/bin
                           /bin
                           /usr/sbin
                           /sbin
                           /opt/X11/bin)

unset PATH
for p in $(jwm_home_paths) ${go_bin_paths[@]} ${standard_paths[@]}; do
    if [ -e "$p" ]; then
        if [ -z "$PATH" ]; then
            PATH="$p"
        else
            PATH="$PATH:$p"
        fi
    fi
done
unset p go_paths go_bin_paths standard_paths
export PATH
